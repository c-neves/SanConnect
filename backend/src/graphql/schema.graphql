schema {
  query: Query
  mutation: Mutation
}

type Query {
  viewer: User!
  signIn(email: String!, password: String!): AuthResponse!
  userRecomendations: [User!]!
  getTags: [String!]!
  publicEvents: [PublicEvent!]!
  getEvent(event:GetEventInput!): Event!
  searchEvents(event:GetAllEventsInput!): [Event!]!
  getUser(user:GetUser!): User!
}

type Mutation {
  signUp(user:SignUpInput!): User!
  createEvent(event:CreateEventInput!): Event!
  updateUser(user:UpdateUserInput!): String!
  updatePassword(user:UpdatePassword!): String!
  updateEvent(event:UpdateEventInput!): Event!
  createParticipa(participa:CreateParticipaInput!): Boolean!
  deleteParticipa(participa:DeleteParticipaInput!): Int!
}

type AuthResponse {
  accessToken: String!
}

input UpdateUserInput {
  email: String!
  nome: String!
  descricao: String
  foto: String
}

input SignUpInput {
	email: String!
	password: String!
	nome: String!
	descricao: String
	foto: String
}

# TODO List
# getEvents (Retorna o evento, a tabela participa e as tags)
# "" com sign in
# UpdateEvents
# SearchEvents
# Participar de evento
  # Atualizar a participação em evento (confirma ou sai do evento)
  # Avaliar (Inserção, Update, Remove, Get)
# Preferência

input CreateEventInput {
  criador: String!
  titulo: String!
  data_hora_evento: String!
  descricao: String
  min_participantes: Int # Se nulo, trocar para 2 antes de inserir no banco.
  max_participantes: Int
  local: String
  categorias: [String]!
}

input UpdateEventInput {
  criador: String! # Não muda
  titulo: String! # Não muda
  data_hora_evento: String! # Não muda
  descricao: String
  min_participantes: Int # Se nulo, trocar para 2 antes de inserir no banco.
  max_participantes: Int
  local: String
  categorias: [String]!
}

# Pode ser usada para buscar todos os eventos, caso nenhum parâmetro receba valor.
# Pode ser utilizada para buscar um único evento, caso todas as chaves sejam preenchidas.
# Pode ser utilziada para filtrar uma busca por eventos, com filtros como por exemplo, categorias.
input GetAllEventsInput {
  criador: String
  titulo: String
  data_hora_evento: String
  descricao: String
  min_participantes: Int
  max_participantes: Int
  data_hora_criacao: String
  local: String
  categorias: [String]
}

input GetEventInput {
  criador: String!
  titulo: String!
  data_hora_evento: String!
}

type Event {
  criador: String!
  titulo: String!
  data_hora_evento: String!
  descricao: String
  min_participantes: Int!
  max_participantes: Int
  data_hora_criacao: String!
  local: String
  categorias: [String]!
  participantes: [User!]!
}

type PublicEvent {
  criador: String!
  titulo: String!
  data_hora_evento: String!
  categorias: [String!]!
}

input UpdatePassword {
  email: String!
  password: String!
  newPassword: String!
}

input GetUser {
  email: String!
}

type User {
  email: String!
  nome: String!
  descricao: String
  foto: String
  likes: Int
  dislikes: Int
}

type Participa {
  criador_evento: String!
  titulo: String!
  data_hora_evento: String!
  email: String!
  confirmacao: Boolean!
  data_hora_ingresso: String!
}

# Entrar em um evento, ou em sua lista de espera;
input CreateParticipaInput {
  criador_evento: String!
  titulo: String!
  data_hora_evento: String!
  email: String!
}

# Sair de um evento. Também confirma o próxima da lista de espera no evento.
input DeleteParticipaInput {
  criador_evento: String!
  titulo: String!
  data_hora_evento: String!
  email: String!
}

# Buscar participações de um usuário
input GetParticipaUserInput {
  user: String! # needs only email
}

# Buscar participantes de um evento
input GetParticipaEventInput {
  criador: String!
  titulo: String!
  data_hora_evento: String!
}
